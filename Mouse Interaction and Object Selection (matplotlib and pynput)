import random
import matplotlib.pyplot as plt
from pynput.mouse import Listener

def generate_frame(num_objects=3):
    """Generate random coordinates for objects in the frame."""
    return [(random.uniform(0, 1), random.uniform(0, 1)) for _ in range(num_objects)]

def on_move(x, y):
    """Callback function for mouse movement."""
    print(f'Mouse moved to ({x}, {y})')

def on_click(event):
    global num_clicks, object_selected
    num_clicks += 1
    if num_clicks == 1:
        print("First click registered. Now click on an object.")
    elif num_clicks == 2:
        object_selected = check_object_selection(event.xdata, event.ydata)
    else:
        plt.close()

def check_object_selection(user_x, user_y):
    """Check if a user-selected point matches any object within the given rectangle."""
    for i, (object_x, object_y) in enumerate(object_coords):
        if (object_x - rect_size/2 <= user_x <= object_x + rect_size/2) and \
           (object_y - rect_size/2 <= user_y <= object_y + rect_size/2):
            return i
    return None

if __name__ == "__main__":
    num_objects = 3
    rect_size = 0.1
    num_clicks = 0
    object_selected = None
    
    object_coords = generate_frame(num_objects)
    
    # Set up plot
    fig, ax = plt.subplots()
    ax.set_xlim(0, 1)
    ax.set_ylim(0, 1)
    ax.set_title("Select an object in the frame")
    
    # Draw objects
    for object_x, object_y in object_coords:
        rect = plt.Rectangle((object_x - rect_size/2, object_y - rect_size/2), rect_size, rect_size, fill=False, edgecolor='red', linewidth=2)
        ax.add_patch(rect)
    
    # Set up mouse interaction
    fig.canvas.mpl_connect('button_press_event', on_click)
    with Listener(on_move=on_move) as listener:
        plt.show()
    
    # Check selection result
    if num_clicks >= 2:
        if object_selected is not None:
            print(f"Object {object_selected} selected!")
        else:
            print("Selection did not match any object.")
